# -*- coding: utf-8 -*-# __author__ = "zok"  362416272@qq.com# Date: 2019-10-16  Python: 3.7import numpy as npimport tensorflow as tffrom flask import Flask, jsonify, render_template, requestfrom mnist import modelx = tf.placeholder("float", [None, 784])sess = tf.Session()"""拿出训练好的模型"""with tf.variable_scope("regression"):    # 线性模型    y1, variables = model.regression(x)saver = tf.train.Saver(variables)# saver.restore(sess, "mnist/data/regression.ckpt")regression_file = tf.train.latest_checkpoint("mnist/data/regression.ckpt")print(regression_file)if regression_file is not None:    saver.restore(sess, regression_file)with tf.variable_scope("convolutional"):    # 卷积模型    sess.run(tf.global_variables_initializer())    keep_prob = tf.placeholder("float")    y2, variables = model.convolutional(x, keep_prob)sess.run(tf.global_variables_initializer())saver = tf.train.Saver(variables)# saver.restore(sess, "mnist/data/convolutional.ckpt")convolutional_file = tf.train.latest_checkpoint("mnist/data/convolutional.ckpt")print(convolutional_file)if convolutional_file is not None:    saver.restore(sess, convolutional_file)# 定义一个输入(线性、卷积)def regression(input):    return sess.run(y1, feed_dict={x: input}).flatten().tolist()def convolutional(input):    return sess.run(y2, feed_dict={x: input, keep_prob: 1.0}).flatten().tolist()# 定义appapp = Flask(__name__)# 路由@app.route('/api/mnist', methods=['post'])def mnist():    input = ((225 - np.array(request.json, dtype=np.uint8))/255.0).reshape(1, 784)    output1 = regression(input)    output2 = convolutional(input)    return jsonify(results=[output1, output2])@app.route("/")def main():    return render_template("index.html")if __name__ == "__main__":    app.debug = True    app.run(host='0.0.0.0', port=8000)